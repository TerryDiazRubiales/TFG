{"ast":null,"code":"import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { computed, inject, signal } from '@angular/core';\nimport { catchError, map, of, tap, throwError } from 'rxjs';\nimport { environments } from 'src/environments/environments';\nimport { AuthStatus } from '../interfaces';\nimport * as i0 from \"@angular/core\";\nexport class AuthService {\n  constructor() {\n    this.baseUrl = environments.baseUrl;\n    this.http = inject(HttpClient);\n    this._currentUser = signal(null);\n    this._authStatus = signal(AuthStatus.checking);\n    this.currentUser = computed(() => this._currentUser());\n    this.authStatus = computed(() => this._authStatus());\n    this.checkAuthStatus().subscribe();\n  }\n  setAuthentication(user, token) {\n    this._currentUser.set(user);\n    this._authStatus.set(AuthStatus.authenticated);\n    localStorage.setItem('token', token);\n    0;\n    return true;\n  }\n  login(email, password) {\n    const url = `${this.baseUrl}/auth/login`;\n    const body = {\n      email,\n      password\n    };\n    return this.http.post(url, body).pipe(map(({\n      user,\n      token\n    }) => this.setAuthentication(user, token)), catchError(err => throwError(() => err.error.message)));\n  }\n  register(name, email, password) {\n    const url = `${this.baseUrl}/auth/register`;\n    const body = {\n      email,\n      password,\n      name\n    };\n    console.log(\"email: \" + email);\n    console.log(\"password: \" + password);\n    console.log(\"name: \" + name);\n    return this.http.post(url, body).pipe(tap(({\n      ok,\n      token\n    }) => {\n      if (ok) {\n        localStorage.setItem('token', token);\n      }\n    }), map(resp => resp.ok), catchError(err => of(err.error.msg)));\n  }\n  checkAuthStatus() {\n    const url = `${this.baseUrl}/auth/check-token`;\n    const token = localStorage.getItem('token');\n    if (!token) {\n      this.logout();\n      return of(false);\n    }\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(url, {\n      headers\n    }).pipe(map(({\n      token,\n      user\n    }) => this.setAuthentication(user, token)), catchError(() => {\n      this._authStatus.set(AuthStatus.notAuthenticated);\n      return of(false);\n    }));\n  }\n  logout() {\n    localStorage.removeItem('token');\n    this._currentUser.set(null);\n    this._authStatus.set(AuthStatus.notAuthenticated);\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpClient","HttpHeaders","computed","inject","signal","catchError","map","of","tap","throwError","environments","AuthStatus","AuthService","constructor","baseUrl","http","_currentUser","_authStatus","checking","currentUser","authStatus","checkAuthStatus","subscribe","setAuthentication","user","token","set","authenticated","localStorage","setItem","login","email","password","url","body","post","pipe","err","error","message","register","name","console","log","ok","resp","msg","getItem","logout","headers","get","notAuthenticated","removeItem","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\aidal\\OneDrive\\Escritorio\\PF_TDR\\authApp\\src\\app\\auth\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable, computed, inject, signal } from '@angular/core';\nimport { Observable, catchError, map, of, tap, throwError } from 'rxjs';\nimport { environments } from 'src/environments/environments';\n\nimport { AuthResponse, AuthStatus, CheckTokenResponse, LoginResponse, User } from '../interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private readonly baseUrl: string = environments.baseUrl;\n  private http = inject( HttpClient );\n\n  private _currentUser = signal<User|null>(null);\n  private _authStatus = signal<AuthStatus>( AuthStatus.checking );\n \n  public currentUser = computed( () => this._currentUser() );\n  public authStatus = computed( () => this._authStatus() );\n\n  constructor() { \n    this.checkAuthStatus().subscribe();\n  }\n\n  private setAuthentication(user: User, token: string): boolean {\n\n    this._currentUser.set( user );\n        this._authStatus.set( AuthStatus.authenticated );\n        localStorage.setItem('token', token);\n        0\n        return true;\n  }\n\n\n  login( email: string, password: string): Observable<boolean> {\n\n    const url = `${ this.baseUrl }/auth/login`;\n    const body = { email, password };\n\n    return this.http.post<LoginResponse>( url, body)\n    .pipe (\n      map ( ({ user, token }) => this.setAuthentication(user, token )),\n      catchError( err  => throwError( () => err.error.message ))\n    );\n  }\n\n  register( name: string, email: string, password: string ) {\n\n    const url  = `${ this.baseUrl }/auth/register`;\n    const body = { email, password, name };\n    console.log(\"email: \"+email);\n    console.log(\"password: \"+password);\n    console.log(\"name: \"+name);\n\n    return this.http.post<AuthResponse>( url, body )\n      .pipe(\n        tap( ({ ok, token }) => {\n          if ( ok ) {\n            localStorage.setItem('token', token! );\n          }\n        }),\n        map( resp => resp.ok ),\n        catchError( err => of(err.error.msg) )\n      );\n\n  }\n\n  checkAuthStatus():Observable<boolean> {\n\n    const url = `${ this.baseUrl }/auth/check-token`;\n    const token = localStorage.getItem('token');\n\n    if ( !token ) {\n      this.logout();\n      return of(false);\n    }\n    const headers = new HttpHeaders()\n    .set('Authorization', `Bearer ${ token }`);\n\n    return this.http.get<CheckTokenResponse>(url, { headers })\n    .pipe(\n      map(( { token, user } ) => this.setAuthentication( user, token )),\n\n      catchError( () => {\n        this._authStatus.set( AuthStatus.notAuthenticated );\n        return of(false);\n      })\n    )\n    \n  }\nlogout() {\n  localStorage.removeItem('token');\n  this._currentUser.set(null);\n  this._authStatus.set( AuthStatus.notAuthenticated );\n}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}